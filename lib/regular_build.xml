<?xml version="1.0"?>

<!-- Works with Ant 1.7.0 and higher -->
<project default="main" basedir=".">

	<property environment="env"/>
	<property file="regular_build.properties"/>
	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${ANT_CONTRIB_JAR}"/>
      </classpath>
    </taskdef>
	
	<import file="code_coverage.xml"/>
    <import file="code_analysis.xml"/>
	<import file="servoy_utils.xml"/>
	
    <!-- Cleans the workspace preparing for a new build        -->
    <!-- Then                                                  -->
    <!--   - exports smart client solutions                    -->
    <!--   - if exports didn't fail, runs smart client tests   -->
    <!--   - fails the build if any tests or exports failed.   -->
    
    <target name="main" depends="setup, code_coverage_reporting_preparation, export_smart_client_solutions, run_smart_client_tests, collect_logs, finish"/>

	<target name="setup">
		<if>
        	 <equals arg1="${test.solution}" arg2=""/>
        	 <then>
        	 	<fail message="Test solution Name not specified (property 'test.solution')"/>
        	 </then>
		</if>
		<script language="javascript"><![CDATA[
			var TEST_SUFFIX = '_test'
			
			var testSolution = project.getProperty('test.solution')
			var solutionUnderTesting = project.getProperty('solution_under_testing')
			
			if (!testSolution) { //if 'test.solution' is not set, derive it from the Job name
				testSolution = project.getProperty('env.JOB_NAME') + TEST_SUFFIX
				project.setProperty('test.solution', testSolution)
			}
			
			if (!solutionUnderTesting) { //if 'solution_under_testing' is not set, derive it from the 'test.solution' value
				if (testSolution.slice(-5) === TEST_SUFFIX) {
					project.setProperty('solution_under_testing', testSolution.slice(0,-5))
				} else {
					project.setProperty('solution_under_testing', testSolution)
				}
			}
		]]></script>
		
	</target>
	
    <target name="export_smart_client_solutions" depends="get_equinox_jar">
    	<!-- Switch the value of the workspace property if Code Coverage is enabled -->
    	<condition property="workspace.internal" value="${code.coverage.instrumented_workspace}" else="${WORKSPACE}">
    		<istrue value="${code.coverage.enabled.internal}"/>
    	</condition>
    	
    	<export-solution solutionNames="${test.solution}" workspace="${workspace.internal}"/>	
    </target>
    
    <target name="run_smart_client_tests" unless="export.failed" depends="prepare_classpath">
        <run-smart-client-tests/>
    	<if>
    	    <not>
    	        <isset property="test.failed"/>
    	    </not>
    	    <then>
    	    	<antcall target="move_solution_exports"/>
    	    	<antcall target="generate_code_coverage_reports"/>
    	    	<antcall target="generate_code_analysis_reports"/>
    	    </then>
    	</if>
    </target>
    
    <target name="move_solution_exports">
    	<!-- TODO .servoy file will contain instrumented code if Code Coverage is enabled, so not suiteable for deployment -->
        <!-- tests passed, move .servoy files to a "passed" directory for any further use -->
        <move todir="${passed.exports.regular.dir}">
            <fileset dir="${test.exports.regular.dir}" includes="**/*" />
        </move>
    </target>   
	
    <target name="collect_logs">
    	<!-- Move workspace log to  -->
        <move file="${workspace.internal}/.metadata/.log" tofile="${build.dir}/logs/workspace.log" failonerror="false"/>
    </target>
	
	<target name="finish">
		<!-- Move the collected logs to the folder for the specific Jenkins build as artifacts -->
		<move todir="${current_job.dir}/builds/${env.BUILD_NUMBER}/archive">
            <fileset dir="${build.dir}/logs" includes="*.log" />
        </move>
		<fail message="Exports failed: please check exporter log files." if="export.failed" />
		<fail message="Tests failed: please check test reports." if="test.failed" />
	</target>
</project>