<?xml version="1.0"?>

<!-- Works with Ant 1.7.0 and higher -->
<project basedir=".">

    <!-- this macro is almost identical to the sample export solution target from [developer.dir]/exporter -->
    <macrodef name="export-solution">
        <attribute name="solutionNames"/>
    	<attribute name="workspace"/>
        <attribute name="outputDir" default="${test.exports.regular.dir}"/>
        <attribute name="failOnError" default="false"/>

    	<sequential>
            <echo level="info" message="*** Preparing build directory for export ***"/>
        	<make-clean-dir dir="${test.exports.regular.dir}" />
        	<make-clean-dir dir="${build.dir}/logs"/>
        	<delete failonerror="false" file="@{workspace}/.metadata/.log" />
        	
        	<!-- now we are ready to start the workspace exporter -->
            <echo level="info" message="Using equinox launcher jar: ${equinox.launcher.jar.location_property}" />
			<echo level="info" message="Exporting @{solutionNames} from workspace @{workspace}"/>
        	
            <java   classname="org.eclipse.equinox.launcher.Main"
                    classpathref="equinox.launcher.jar.location"
                    failonerror="@{failOnError}"
                    resultproperty="export.result"
                    fork="true">
                <jvmarg value="${servoy.exporter.memory.xms}" />
                <jvmarg value="${servoy.exporter.memory.xmx}" />
                <jvmarg value="${servoy.exporter.memory.maxpermsize}" />
                <jvmarg value="-Dosgi.configuration.cascaded=false" />
                <jvmarg value="-Dtest.log.location=${build.dir}/logs/export.log" />
                
                <arg value="-application" />
                <arg value="com.servoy.eclipse.exporter.solution.application" />

                <arg value="-data" />
                <arg value="@{workspace}" />
                <arg value="-s" />
                <arg value="@{solutionNames}" />
                <arg value="-o" />
                <arg value="@{outputDir}" />
                <arg value="-as" />
                <arg value="${servoy.app_server.dir}" />
                <arg value="-p" />
                <arg value="${servoy.test.property.file}" />

                <!-- add here any of the optional arguments supported by the exporter; see 'export -help' for more info; for example: -->
                <!--arg value="-help" /-->
                <arg value="-verbose" />
            	<arg value="-sw" />
            	<arg value="-pl" />
                <arg value="-dbd" />
                <arg value="-dbi" />
                <arg value="-md" />
                <arg value="ws" />
                <arg value="-i18n" />
                <arg value="-users" />
                <arg value="-tables" />
                <arg value="-modules" />
            </java>
            <condition property="export.failed">
                <not>
                    <equals arg1="${export.result}" arg2="0"/>
                </not>
            </condition>
        </sequential>
    </macrodef>

    <macrodef name="run-smart-client-tests">
		<sequential>
			<echo level="info" message="*** Preparing build directory for Unit Tests ***"/>
			<make-clean-dir dir="${junit.result.dir}" />
			        	
			<make-clean-dir dir="${passed.exports.dir}"/>
			<make-clean-dir dir="${passed.exports.regular.dir}"/>
			
			<delete includeemptydirs="true" quiet="true">
	            <fileset dir="${build.dir}" includes="junit*.properties" />
	        </delete>
			
			<script language="javascript"><![CDATA[
				//Set internal property for test timeout in milliseconds
				var value = parseInt(project.getProperty('test.timeout.minutes'));
				project.setProperty('test.timeout', value * 60 * 1000);

				//Set internal property for solution load timeout in milliseconds
				value = parseInt(project.getProperty('solution-load.timeout.minutes')||project.getProperty('test.timeout.minutes'))
				project.setProperty('servoy.test.solution-load.timeout', value * 60 * 1000);
				
				//Record startTime for logging total duration after finishing running the tests
				project.setProperty('servoy.test.start-time', Date.now());
			]]></script>
			
			<echo level="info" message="*** Running Unit Tests ***"/>
        
	    	<!-- Define a timeout so we know the test will finish eventually -->
            <junit fork="yes" forkmode="once" timeout="${test.timeout}" dir="${servoy.app_server.dir}" haltonfailure="false" haltonerror="false" showoutput="true" errorProperty="test.failed" failureProperty="test.failed" printsummary="withOutAndErr">
            	<jvmarg value="${servoy.tester.memory.xms}" />
            	<jvmarg value="${servoy.tester.memory.xmx}" />
            	<jvmarg value="${servoy.tester.memory.maxpermsize}" />
            	<jvmarg value="-Dtest.log.location=${build.dir}/logs/test.log" />
                <classpath refid="classpath.run_test" />

                <sysproperty key="servoy.test.target-exports" value="${test.exports.regular.dir}" />
                <sysproperty key="servoy.test.property-file" value="${servoy.test.property.file}" />
            	<sysproperty key="servoy.test.solution-load.timeout" value="${servoy.test.solution-load.timeout}" />
                <!-- <sysproperty key="servoy.test.target-file-ext" value=".servoy" /> -->

                <formatter type="xml" extension=".xm1"/>

                <!-- formatter similar to type="xml" but it shows test suite hierarchy nicely, in a tree-like result xml - useful to nicely show the place where a test failed (solution/form...)
                but this formatter is not included in ant yet - you would need to patch it yourself and integrate in ant lib from https://issues.apache.org/bugzilla/show_bug.cgi?id=48529
                if you plan on using it, either comment out the simple "xml" formatter or add "extension" attribute to one of them so they don't get into conflicts when generating xmls -->
                <formatter type="xml.suites"/>

                <test name="com.servoy.automation.jsunit.smartclient.ServoyJSUnitTestRunner" todir="${junit.result.dir}" />
            </junit>
            
			<script language="javascript"><![CDATA[
				var start = parseInt(project.getProperty('servoy.test.start-time'))
				var delta = Math.round((Date.now() - start)/1000)
				
				var seconds = delta % 60
				delta -= seconds
				var minutePart = delta%3600
				delta -= minutePart
				
				var value = delta ? delta/3600 + ' hours ': '' //hours
				value += (minutePart ? minutePart / 60 : '0') + ' minutes ' //minutes
				value += seconds + ' seconds' //secondsvalue
								
				project.log("Solution import and Unit Test execution finished in " + value, project.MSG_INFO)
			]]></script>
           
            <antcall target="create_test_report"/>

            <!-- don't fail directly here so that test artifacts can be prepared for Jenkins before failing - and also allow any mobile tests to run -->
           </sequential>
    </macrodef>
            
    <target name="create_test_report">
        <junitreport todir="${junit.result.dir}">
            <fileset dir="${junit.result.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <!--<report format="noframes" todir="${junit.result.dir}" />-->

            <!-- report similar to format="noframes" but it shows test suite hierarchy nicely, in a tree-like result html - useful to nicely show the place where a test failed (solution/form...)
            but this report is not included in ant yet - you would need to patch it yourself and integrate in ant lib from https://issues.apache.org/bugzilla/show_bug.cgi?id=48529 -->
            <report format="noframes-suiteaware" todir="${junit.result.dir}" />
        </junitreport>
    </target>
        
    <target name="get_equinox_jar">
        <!-- store path to newest Eclipse launcher JAR in path id 'newest.equinox.launcher.path.id' -->
        <!-- and turn the path into a property -->
        <latest_jar pathName="equinox.launcher.jar.location" dir="${servoy.developer.dir}/plugins" includes="**/org.eclipse.equinox.launcher_*.jar"/>
    </target>

    <target name="prepare_classpath">
        <mkdir dir="${build.dir}"/>

        <latest_jar pathName="cse.jsunit.jar.location" dir="${servoy.developer.dir}/plugins" includes="**/com.servoy.eclipse.jsunit_*.jar"/>
        <latest_jar pathName="cse.model.jar.location" dir="${servoy.developer.dir}/plugins" includes="**/com.servoy.eclipse.model_*.jar"/>
        <latest_jar pathName="servoy_debug.jar.location" dir="${servoy.developer.dir}/plugins" includes="**/servoy_debug_*.jar"/>
        <latest_jar pathName="cse.exporter.mobile.location" dir="${servoy.developer.dir}/plugins" includes="**/com.servoy.eclipse.exporter.mobile_*.jar"/>
        <echo level="info" message="Using in importer classpath: ${cse.jsunit.jar.location_property}" />
        <echo level="info" message="Using in importer classpath: ${cse.model.jar.location_property}" />
        <echo level="info" message="Using in importer classpath: ${servoy_debug.jar.location_property}" />
        <echo level="info" message="Using in importer classpath: ${cse.exporter.mobile.location_property}" />

        <unzip src="${cse.jsunit.jar.location_property}" dest="${build.dir}">
            <patternset>
                <include name="jsunit-*.jar"/>
                <include name="j2db_test.jar"/>
            </patternset>
        </unzip>

        <path id="classpath.run_test">
            <fileset dir="${servoy.app_server.dir}/lib">
                <include name="*.jar" />
                <exclude name="slf4j-jdk14.jar"/>
            </fileset>
            <fileset dir="${build.dir}">
                <include name="*.jar" />
            </fileset>
            <fileset file="${cse.jsunit.jar.location_property}"/>
            <fileset file="${cse.model.jar.location_property}"/>
            <fileset file="${servoy_debug.jar.location_property}"/>
            <fileset file="${cse.exporter.mobile.location_property}"/>
            <fileset dir="${servoy.developer.dir}/plugins">
                <include name="org.junit*4*/junit*.jar"/>
            </fileset>
        </path>
    </target>

    <macrodef name="latest_jar">
        <attribute name="pathName"/>
        <attribute name="propertyName" default="@{pathName}_property"/>
        <attribute name="dir"/>
        <attribute name="includes"/>
        <sequential>
            <!-- store path to newest JAR -->
            <path id="@{pathName}">
                <first count="1">
                    <sort>
                        <fileset dir="@{dir}" includes="@{includes}" />
                        <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
                            <date />
                        </reverse>
                    </sort>
                </first>
            </path>

            <!-- create a property as well -->
           <property name="@{propertyName}" refid="@{pathName}" />
       </sequential>
    </macrodef>

    <macrodef name="make-clean-dir">
        <attribute name="dir"/>
        <sequential>
            <delete dir="@{dir}" quiet="true"/>
            <mkdir dir="@{dir}"/>
       </sequential>
    </macrodef>
    
</project>